class(it, package) ::= <<
/*
 * Copyright (C) 2011
 *   Michael Mosmann \<michael@mosmann.de>
 *   Martin JÃ¶hren \<m.joehren@googlemail.com>
 *
 * with contributions from
 * 	konstantin-ba@github,Archimedes Trajano	(trajano@github)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.flapdoodle.embed.mongo.packageresolver<if(it.package.is)>.<it.package.get><endif>;

import de.flapdoodle.embed.mongo.packageresolver.Command;
import de.flapdoodle.embed.mongo.packageresolver.HasMongotoolsPackage;
import de.flapdoodle.embed.mongo.packageresolver.HtmlParserResultTester;
import de.flapdoodle.embed.process.distribution.Distribution;
import de.flapdoodle.embed.process.distribution.Version;
import de.flapdoodle.os.*;
<it.imports:{ import |
import <import>;
}>
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.Optional;

/**
* this file is generated, please don't touch
*/
class <it.name>Test {
<package.entries:{ pair | <pair.urlVersions.entries:{ urlAndVersions |
<if(urlAndVersions.versions.hasDevVersions)>
	@ParameterizedTest
	@ValueSource(strings = { <versionRanges(urlAndVersions.versions.devVersions)> \})
	public void <pair.platform.testMethodName><urlAndVersions.index>Dev(String version) {
		<assertThatDev(pair.platform, urlAndVersions.testUrl)>
	\}
<endif>
<if(urlAndVersions.versions.hasVersions)>
	@ParameterizedTest
	@ValueSource(strings = { <versionRanges(urlAndVersions.versions.versions)> \})
	public void <pair.platform.testMethodName><urlAndVersions.index>(String version) {
		<assertThat(pair.platform, urlAndVersions.testUrl)>
	\}

<endif>
}><pair.urlVersions.toolEntries:{ toolsUrlAndVersions | <if(toolsUrlAndVersions.versions.hasVersions)>
	@ParameterizedTest
	@ValueSource(strings = { <versionRanges(toolsUrlAndVersions.versions.versions)> \})
	public void <pair.platform.testMethodName><toolsUrlAndVersions.index>Tools(String version) {
		<assertThatTools(pair.platform, toolsUrlAndVersions.testUrl)>
	\}
<endif>
}>}>

	private static Platform withPlatform(OS os, CommonArchitecture architecture) {
		return ImmutablePlatform.builder()
			.operatingSystem(os)
			.architecture(architecture)
			.build();
	}

	private static Platform withPlatform(OS os, CommonArchitecture architecture, de.flapdoodle.os.Version version) {
		return ImmutablePlatform.builder()
			.operatingSystem(os)
			.architecture(architecture)
			.version(version)
			.build();
	}

	private static HtmlParserResultTester assertThat(Platform platform, String versionList) {
		return HtmlParserResultTester.with(
			new <it.name>(Command.MongoD),
			version -> Distribution.of(Version.of(version), platform),
			versionList);
	}

	private static HtmlParserResultTester assertThatTools(Platform platform, String versionList) {
		return HtmlParserResultTester.with(
			new <it.name>(Command.MongoDump),
			version -> Distribution.of(ToolsVersion.of(Version.of(version)), platform),
			versionList);
	}

	static class ToolsVersion implements Version, HasMongotoolsPackage {
		private final Version toolsVersion;

		public ToolsVersion(Version toolsVersion) {
			this.toolsVersion = toolsVersion;
		}

		@Override
		public String asInDownloadPath() {
			return "any";
		}

		@Override
		public Optional\<? extends Version> mongotoolsVersion() {
			return Optional.of(toolsVersion);
		}

		private static ToolsVersion of(Version toolsVersion) {
			return new ToolsVersion(toolsVersion);
		}
	}
}
>>

assertThat(package,url) ::= <<
<if (package.version)>
<package.version:{ version | assertThat(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>, <version.className>.<version>), version)
	.resolvesTo("<url>");}; separator="\n\n"><else>
assertThat(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>), version)
  .resolvesTo("<url>");<endif>
>>

assertThatVersion(package,version,url) ::= <<
assertThat(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>, <version.className>.<version>), version)
	.resolvesTo("<url>");
>>

assertThatDev(package,url) ::= <<
<if (package.version)>
<package.version:{ version | assertThat(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>, <version.className>.<version>), version)
	.resolveDevPackageTo("<url>");}; separator="\n\n"><else>
assertThat(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>), version)
  .resolvesTo("<url>");<endif>
>>

assertThatVersionDev(package,version,url) ::= <<
assertThat(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>, <version.className>.<version>), version)
	.resolveDevPackageTo("<url>");
>>

assertThatTools(package,url) ::= <<
<if (package.version)>
<package.version:{ version | assertThatTools(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>, <version.className>.<version>), version)
	.resolvesTo("<url>");}; separator="\n\n"><else>
assertThatTools(withPlatform(CommonOS.<package.os>, CommonArchitecture.<package.architecture>), version)
	.resolvesTo("<url>");<endif>
>>

versionRanges(versions) ::= <<
<versions: {version | <versionRange(version)>}; separator=", ">
>>
versionRange(version) ::= <<
<if(version.isExact)>"<version.min>"<else>"<version.min> -> <version.max>"<endif>
>>

